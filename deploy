#!/bin/bash
#
# took from vodik

dotfiles=$PWD
mode="laptop"

die() {
  echo >&2 "$1" && exit 1
}

link() {
  [[ -z $2 ]] && target=".${1##*/}" \
              || target="${2:-$target}"

  [[ -e "$target" && ! -h "$target" ]] && die "$0: $target exists in filesystem"
  [[ -d "$target"                   ]] && rm "$target"

  ln -fs "$dotfiles/$1" "$target"
  echo "linked $1 to $target"
}

# Deploy scriptlets {{{
dotfiles_bin()        { link bin bin;                                 }
dotfiles_git()        { link git/gitconfig;                           }
dotfiles_gtk()        { link gtk/gtkrc-2.0;                           }
dotfiles_i3()         { link i3 .config/i3;                           }
dotfiles_bspwm()      { link bspwm .config/bspwm;                     }
dotfiles_ncmpcpp()    { link ncmpcpp;                                 }
dotfiles_tmux()       { link tmux/tmux.conf;                          }
dotfiles_subl() {
  link subl/Preferences.sublime-settings .config/sublime-text-3/Packages/User/Preferences.sublime-settings;
}

dotfiles_mutt() {
  link mutt/settings .mutt

  # muttrc should be copied, safeguard against accidentally pushing credentials
  from="$dotfiles/mutt/muttrc"
  to="$HOME/.muttrc"
  cp "$from" "$to"
  echo "copied $from to $to"
}

dotfiles_dunst() {
  [[ -d $HOME/.config/dunst ]] || mkdir $HOME/.config/dunst
  link dunst/dunstrc .config/dunst/dunstrc;
}

dotfiles_termite() {
  [[ -d $HOME/.config/termite ]] || mkdir $HOME/.config/termite
  link termite/termite.cfg .config/termite/config;
}

dotfiles_compton() {
  [[ -d $HOME/.config/compton ]] || mkdir $HOME/.config/compton

  if [[ $mode == "desktop" ]]; then
    link compton/compton.conf.desktop .config/compton/config;
  else
    link compton/compton.conf.laptop .config/compton/config;
  fi
}

dotfiles_X() {
  if [[ $mode == "desktop" ]]; then
    link X/Xresources.desktop .Xresources
    link X/xinitrc.desktop .xinitrc
  else
    link X/Xresources.laptop .Xresources
    link X/xinitrc.laptop .xinitrc
  fi

  link X/user-dirs.dirs .config/user-dirs.dirs
}

dotfiles_zsh() {
  link zsh/zprofile
  link zsh/zshrc

  link zsh/dircolors
  link zsh/inputrc

  [[ -d $HOME/.zsh ]] || mkdir $HOME/.zsh
  link zsh/alias .zsh/alias.zsh
  link zsh/functions .zsh/functions.zsh
}

dotfiles_vim() {
  link vim
  link vim/vimrc

  [[ ! -d ~/.vim/backup ]] && mkdir ~/.vim/backup
  [[ ! -d ~/.vim/swap ]] && mkdir ~/.vim/swap
  if [[ ! -d ~/.vim/bundle/Vundle.vim ]]; then
    mkdir ~/.vim/bundle
    git clone https://github.com/gmarik/Vundle.vim ~/.vim/bundle/Vundle.vim
    vim +BundleInstall
  fi
}

dotfiles_weechat() {
  link weechat/weechat.conf .weechat/weechat.conf
  link weechat/buffers.conf .weechat/buffers.conf
}
# }}}

usage() {
  cat << HERE
Automated deploy function for dotfile syncronization.

SUPPORTED:
HERE

  for fn in $(compgen -A function dotfiles_); do
    echo "  ${fn#dotfiles_}"
  done
  exit ${1:-0}
}

deploy() {
  while (( $# )); do
    [[ $1 == "desktop" ]] && break

    cd && dotfiles_${1#dotfiles_}
    if [[ $? == 127 ]]; then
      echo  >&2 "Error: don't know how to deploy \"$1\""
      usage >&2 1
    fi
    shift
  done
}

[[ -n $2 ]] && mode=$2

if (( $# == 0 )); then
  read -r -p "Deploy all? " ans
  if [[ $ans =~ ^[Yy]$ ]]; then
    deploy $(compgen -A function dotfiles_)
  fi
elif [[ "$1" == "--help" ]]; then
  usage 0
else
  deploy $*
fi
