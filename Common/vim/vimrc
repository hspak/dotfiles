set nocompatible                      " use Vim defaults, screw vi
filetype off                          " I think I needed this up here for something

call plug#begin('~/.vim/plugged')

" functional bundles
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'scrooloose/nerdcommenter'
Plug 'Raimondi/delimitMate'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-fugitive'
Plug 'rking/ag.vim'
" Plug 'vim-syntastic/syntastic'
Plug 'stephpy/vim-yaml'

" prettify bundles
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/seoul256.vim'
"Plug 'Yggdroot/indentLine' {  }
Plug 'Chiel92/vim-autoformat'

" language
Plug 'pearofducks/ansible-vim',   { 'for': 'ansible' }
Plug 'justinmk/vim-syntax-extra', { 'for': 'c' }
Plug 'vim-scripts/a.vim',         { 'for': 'c' }
Plug 'cespare/vim-toml',          { 'for': 'toml' }
Plug 'plasticboy/vim-markdown',   { 'for': 'md' }
Plug 'pangloss/vim-javascript',   { 'for': ['javascript', 'jsx'] }
Plug 'mxw/vim-jsx',               { 'for': ['javascript', 'jsx'] }
Plug 'vim-ruby/vim-ruby',         { 'for': 'ruby' }
Plug 'fatih/vim-go',              { 'for': 'go' }
Plug 'rust-lang/rust.vim',        { 'for': 'rust' }
Plug 'Glench/Vim-Jinja2-Syntax',  { 'for': 'jinja' }
Plug 'hashivim/vim-terraform',    { 'for': 'terraform' }
Plug 'saltstack/salt-vim',        { 'for': 'yaml' }

" sensitive plugins
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer' }
autocmd! User YouCompleteMe call youcompleteme#Enable()

call plug#end()

" plug-in settings
" -------------------------------------
filetype plugin indent on
set ofu=syntaxcomplete#Complete

" General Options
" -------------------------------------
set encoding=utf-8
set t_Co=256                          " enable 256 colors
set mouse=a                           " make sure mouse is used in all cases.
set autoread                          " detect external changes
set backspace=indent,eol,start        " behave like a normal backspace
set complete+=k                       " enable dictionary completion
set completeopt=longest,menuone       " better completion popup
set showcmd                           " display current command
set title                             " sets terminal title
set virtualedit=all                   " enable visual block edit
set wildmenu                          " cmd line completion
set wildmode=longest,full             " cmd line completion
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set scrolloff=5                       " lines between cursor and edge
set shortmess=atIT                    " avoid annoying prompts?
set laststatus=2                      " always show a status line
set clipboard+=unnamed                " yank and copy to X clipboard
set backspace=2                       " full backspacing capabilities
set history=50                        " 50 lines of command line history
set ruler                             " ruler display in status line
set ww=<,>,[,]                        " whichwrap -- left/right keys can traverse up/down
set cmdheight=1                       " set the command height
set showmatch                         " show matching brackets (),{},[]
set number                            " show number line
set hidden                            " allow unsaved buffers to go in background
set shell=/usr/local/bin/zsh          " set shell
set visualbell                        " don't beep
set magic                             " enables regex highlight?
set cursorline                        " highlights current line
set shiftround                        " rounds shifts
set modeline                          " enable in-file settings
set timeoutlen=500 ttimeoutlen=0      " faster mode switching
set lazyredraw                        " wait to redraw window

"  wrap like other editors
" -------------------------------------
set wrap                              " word wrap
set lbr                               " line break

" backup settings
" -------------------------------------
" set backup                            " keep a backup file
" set backupdir=~/.vim/backup           " backup dir
set directory=~/.vim/swap             " swap file directory

" tabs and indenting
" -------------------------------------
set expandtab                         " replace tabs with spaces
set tabstop=2                         " a n-space tab width
set shiftwidth=2                      " allows the use of < and > for VISUAL indenting
set autoindent                        " auto indents next new line
set smarttab                          " it reads your mind?
set shiftround                        " better tab aligning

" searching
" -------------------------------------
set hlsearch                          " highlight search results
set incsearch                         " increment search
set ignorecase                        " case-insensitive search
set smartcase                         " upper-case sensitive search

" Code Folding
"---------------------------------
if has ('folding')
  set foldenable
  set foldmethod=marker
  set foldmarker={{{,}}}
  set foldcolumn=0
endif

" syntax highlighting
" -------------------------------------
syntax on
syntax enable

set statusline=%<[%n]\ %F\ %m%r%y\ %{exists('g:loaded_fugitive')?fugitive#statusline():''}\ %=%-14.(%l,%c%V%)\ %P

set guifont=Office_Code_Pro:h12
set guioptions-=T
set guioptions-=r
set guioptions-=L
set gcr=a:blinkon0

colorscheme seoul256
color seoul256
set background=dark

" custom keybindings {{{
let maplocalleader = ","
let mapleader = ","

map Q <Nop>
map q: <Nop>
map <F11> <Nop>
map <C-T> <Nop>

map <F2> :wall<CR>
map <silent> <F12> :set hlsearch! hlsearch?<CR>
map <silent> <LocalLeader>l :NERDTreeToggle<CR>
map <silent> <LocalLeader>m :bnext<cr>
map <silent> <LocalLeader>v :bprev<cr>

set pastetoggle=<F4>

" map space to create/open/close fold
nnoremap <silent> <Space> @=(foldlevel('.')?'za':'l')<CR>
vnoremap <Space> zf

" show me all open buffers
nnoremap <C-b> :CtrlP<CR>

nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" normal movement for wrapped lines
noremap k gk
noremap j gj

" quick split
noremap <silent> V :vsplit<CR> :wincmd l<CR>
noremap <silent> H :split<CR> :wincmd j<CR>

noremap <leader>r :NERDTreeFind<cr>

nnoremap Q <C-W>q
nnoremap W :wq<CR>
nnoremap B :buffers<CR>

" window movement
nnoremap <silent> <C-k> :wincmd k<CR>
nnoremap <silent> <C-j> :wincmd j<CR>
nnoremap <silent> <C-l> <C-W>w
nnoremap <silent> <C-h> <C-W>W

" I almost never horizontal split
" nnoremap <silent> <C-h> :wincmd h<CR>
map <C-g> :vertical resize +5<CR>

" buffer navigation
noremap <silent> <LocalLeader>1 :buffer 1<CR>
noremap <silent> <LocalLeader>2 :buffer 2<CR>
noremap <silent> <LocalLeader>3 :buffer 3<CR>
noremap <silent> <LocalLeader>4 :buffer 4<CR>
noremap <silent> <LocalLeader>5 :buffer 5<CR>
noremap <silent> <LocalLeader>6 :buffer 6<CR>
noremap <silent> <LocalLeader>7 :buffer 7<CR>
noremap <silent> <LocalLeader>8 :buffer 8<CR>
noremap <silent> <LocalLeader>9 :buffer 9<CR>

" rust goto
nnoremap <Leader>] :YcmCompleter GoTo<CR>

" allow writing root files when forgetting to sudo
cmap w!! w !sudo tee % >/dev/null<CR>:e!<CR><CR>

" add command to remove all trailing whitespace
function! s:FixWhitespace(line1,line2)
  let l:save_cursor = getpos(".")
  silent! execute ':' . a:line1 . ',' . a:line2 . 's/\s\+$//'
  call setpos('.', l:save_cursor)
endfunction
command! -range=% FixWhitespace call <SID>FixWhitespace(<line1>,<line2>)

au BufWrite * :FixWhitespace
" }}}

" auto commands {{{
" disable annoying auto comment
autocmd BufNewFile,BufRead * setlocal formatoptions-=cro

" turn hash bangs into executeables automatically
au BufWritePost * if getline(1) =~ "^#!" | silent :!chmod +x <afile>

" save last position
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif "

" highlight yacc files as if they were cpp files
au BufRead,BufNewFile *.y set syntax=cpp

" highlight sls files as if they were yaml files
au BufRead,BufNewFile *.sls set filetype=yaml syntax=yaml

" file type specific settings
au FileType c           setlocal ts=8 sw=8
au FileType javascript  setlocal ts=2 sw=2 et
au FileType cpp         setlocal ts=4 sw=4
au FileType rust        setlocal ts=4 sw=4
au FileType java        setlocal ts=4 sw=4
au FileType make        setlocal noet
au FileType python      setlocal sw=4 ts=4 et
au FileType markdown    setlocal ts=4 sw=4 textwidth=80 cc=80 et
au FileType go          setlocal sw=4 ts=4 noet
au FileType lex         setlocal sw=8 ts=8
au FileType yacc        setlocal sw=8 ts=8
au FileType json        setlocal conceallevel=0

" correct :W to :w, :Q to :q, & :Wq to :wq
cnoreabbrev <expr> W ((getcmdtype() is# ':' && getcmdline() is# 'W')?('w'):('W'))
cnoreabbrev <expr> Q ((getcmdtype() is# ':' && getcmdline() is# 'Q')?('q'):('Q'))
cnoreabbrev <expr> Wq ((getcmdtype() is# ':' && getcmdline() is# 'Wq')?('wq'):('Wq'))

let &titleold=getcwd()
" }}}

" plugin settings {{{
" -------------------------------------
let NERDSpaceDelims = 1
let NERDUsePlaceHolders = 0
let NERDTreeQuitOnOpen = 1
let NERDChristmasTree = 1
let NERDRemoveExtraSpaces = 1

" indentLine
let g:indentLine_color_term = 236
let g:indentLine_char = '|'
set list lcs=trail:·,tab:»⋅,nbsp:⋅,

" delimiteMate
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1
let delimitMateBackspace = 1
let delimitMate_jump_expansion = 1

" ycm
let g:ycm_global_ycm_extra_conf = '$HOME/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0
let g:ycm_error_symbol = '✘'
let g:ycm_warning_symbol = '⚠'
let g:ycm_always_populate_location_list = 0
let g:ycm_auto_start_csharp_server = 0
let g:ycm_server_log_level = 'critical'
let g:EclimCompletionMethod = 'omnifunc'

" ctrlp
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ }
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_clear_cache_on_exit = 1
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:15,results:15'
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

" markdown
let g:vim_markdown_folding_disabled=1

" go
let g:go_fmt_command = "goimports"
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_string_spellcheck = 1
let g:go_highlight_format_strings = 1

" jsx
let g:jsx_ext_required = 0

" ag
let g:ag_working_path_mode="r"

" syntastic
set statusline+=%{exists('g:loaded_syntastic_plugin')?SyntasticStatuslineFlag():''}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_loc_list_height = 5
highlight link SyntasticErrorSign SignColumn
highlight link SyntasticWarningSign SignColumn
highlight link SyntasticStyleErrorSign SignColumn
highlight link SyntasticStyleWarningSign SignColumn

" autoformat
let g_autoformat_verbosemode=0
let g:formatdef_rustfmt = '"rustfmt"'
let g:formatters_rust = ['rustfmt']
au BufWrite *.rs silent :Autoformat<CR>
" }}}
