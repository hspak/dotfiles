set nocompatible                      " use Vim defaults, screw vi
filetype off                          " I think I needed this up here for something

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" functional bundles
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'Raimondi/delimitMate'
Plugin 'vim-scripts/a.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'airblade/vim-gitgutter'
Plugin 'bling/vim-airline'
Plugin 'bling/vim-bufferline'
Plugin 'scrooloose/syntastic'
Plugin 'Lokaltog/vim-easymotion'

Plugin 'Valloric/YouCompleteMe'
"Plugin 'Shougo/neocomplete.vim'

" prettify bundles
Plugin 'plasticboy/vim-markdown'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'vim-scripts/MatlabFilesEdition'
Plugin 'JuliaLang/julia-vim'
Plugin 'cazador481/vim-systemverilog'
Plugin 'digitaltoad/vim-jade'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'wting/rust.vim'
Plugin 'Yggdroot/indentLine'
Plugin 'jelera/vim-javascript-syntax'

call vundle#end()

" plug-in settings
" -------------------------------------
filetype plugin indent on
set ofu=syntaxcomplete#Complete

" General Options
" -------------------------------------
set t_Co=256                          " enable 256 colors
set mouse=a                           " make sure mouse is used in all cases.
set autoread                          " detect external changes
set autowrite                         " saves file on buffer switch
set backspace=indent,eol,start        " behave like a normal backspace
set shortmess+=I                      " disable the welcome screen
set complete+=k                       " enable dictionary completion
set completeopt=longest,menuone       " better completion popup
set showcmd                           " display current command
set title                             " sets terminal title
set virtualedit=all                   " enable visual block edit
set wildmenu                          " cmd line completion
set wildmode=longest,full             " cmd line completion
set wildignore=*.o,*.obj,*.bak,*.exe  " ignore these though
set scrolloff=5                       " lines between cursor and edge
set shortmess=atI                     " avoid annoying prompts?
set laststatus=2                      " always show a status line
set clipboard+=unnamed                " yank and copy to X clipboard
set backspace=2                       " full backspacing capabilities
set history=50                        " 50 lines of command line history
set ruler                             " ruler display in status line
set ww=<,>,[,]                        " whichwrap -- left/right keys can traverse up/down
set cmdheight=1                       " set the command height
set showmatch                         " show matching brackets (),{},[]
set number                            " show number line
set hidden                            " allow unsaved buffers to go in background
set shell=/bin/bash                   " set shell
set cursorline                        " highlight current line
set visualbell                        " don't beep
set magic                             " enables regex highlight?
set shiftround                        " rounds shifts
set noshowmode                        " redundant with airline

" performance helpers
" -------------------------------------
set ttyfast                           " probably doesn't help me
set lazyredraw
set synmaxcol=200
syntax sync minlines=200

"  wrap like other editors
" -------------------------------------
set wrap                              " word wrap
set lbr                               " line break

" backup settings
" -------------------------------------
set backup                            " keep a backup file
set backupdir=~/.vim/backup           " backup dir
set directory=~/.vim/swap             " swap file directory

" tabs and indenting
" -------------------------------------
set expandtab                         " replace tabs with spaces
set tabstop=2                         " a n-space tab width
set shiftwidth=2                      " allows the use of < and > for VISUAL indenting
set autoindent                        " auto indents next new line
set smarttab                          " it reads your mind?
set shiftround                        " better tab aligning

" searching
" -------------------------------------
set hlsearch                          " highlight search results
set incsearch                         " increment search
set ignorecase                        " case-insensitive search
set smartcase                         " upper-case sensitive search

" Code Folding
"---------------------------------
if has ('folding')
  set foldenable
  set foldmethod=marker
  set foldmarker={{{,}}}
  set foldcolumn=0
endif

" syntax highlighting
" -------------------------------------
syntax on
syntax enable
set background=dark
colorscheme erosion

" custom keybindings
" -------------------------------------
let maplocalleader = ","
let mapleader = ","

map Q <Nop>
map q: <Nop>
map <F11> <Nop>
map <C-T> <Nop>

" map <Leader> <Plug>(easymotion-prefix)
nmap s <Plug>(easymotion-s2)
nmap t <Plug>(easymotion-t2)

" No arrow keys, ha!
map <Left> <Nop>
map <Right> <Nop>
map <Up> <Nop>
map <Down> <Nop>

map <F2> :wall<CR>
map <silent> <F12> :set hlsearch! hlsearch?<CR>
map <silent> <LocalLeader>l :NERDTreeToggle<CR>
map <silent> <LocalLeader>m :bnext<cr>
map <silent> <LocalLeader>v :bprev<cr>

" building
nnoremap <silent> <F4> :SyntasticToggleMode
nnoremap <silent> <F5> :w<CR> :SyntasticCheck<CR> :Errors<CR>
nnoremap <silent> <F6> :lclose<CR>

" map space to create/open/close fold
nnoremap <silent> <Space> @=(foldlevel('.')?'za':'l')<CR>
vnoremap <Space> zf

nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" normal movement for wrapped lines
noremap k gk
noremap j gj

" quick split
noremap <silent> V :vsplit<CR> :wincmd l<CR>
noremap <silent> H :split<CR> :wincmd j<CR>

nnoremap Q <C-W>q
nnoremap W :wq<CR>
nnoremap B :buffers<CR>

" window movement
nnoremap <silent> <C-k> :wincmd k<CR>
nnoremap <silent> <C-l> <C-W>w
nnoremap <silent> <C-h> :wincmd h<CR>
nnoremap <silent> <C-j> :wincmd j<CR>

" buffer navigation
noremap <silent> <LocalLeader>1 :buffer 1<CR>
noremap <silent> <LocalLeader>2 :buffer 2<CR>
noremap <silent> <LocalLeader>3 :buffer 3<CR>
noremap <silent> <LocalLeader>4 :buffer 4<CR>
noremap <silent> <LocalLeader>5 :buffer 5<CR>
noremap <silent> <LocalLeader>6 :buffer 6<CR>
noremap <silent> <LocalLeader>7 :buffer 7<CR>
noremap <silent> <LocalLeader>8 :buffer 8<CR>
noremap <silent> <LocalLeader>9 :buffer 9<CR>

" allow writing root files when forgetting to sudo
cmap w!! w !sudo tee % >/dev/null<CR>:e!<CR><CR>

" auto commands
" -------------------------------------
" turn hash bangs into executeables automatically
au BufWritePost * if getline(1) =~ "^#!" | silent :!chmod +x <afile>

" save last position
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif "

" file type specific settings
au FileType c           setlocal ts=8 sw=8
au FileType javascript  setlocal ts=2 sw=2 et
au FileType cpp         setlocal ts=4 sw=4
au FileType rust        setlocal ts=4 sw=4
au FileType make        setlocal noet
au FileType python      setlocal sw=4 ts=4 et
au FileType mkd         setlocal ts=4 sw=4 textwidth=80 cc=80 et

let &titleold=getcwd()

" plugin settings
" -------------------------------------
let NERDSpaceDelims = 1
let NERDUsePlaceHolders = 0
let NERDTreeQuitOnOpen = 1
let NERDChristmasTree = 1
let NERDRemoveExtraSpaces = 1

" indentLine
let g:indentLine_color_term = 234
let g:indentLine_char = '|'

" delimiteMate
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1
let delimitMateBackspace = 1
let delimitMate_jump_expansion = 1

" airline
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline_theme = "wombat"
let g:bufferline_echo = 0

" Syntastic
let g:syntastic_cpp_compiler_options = '-std=c++11'
let g:syntastic_cpp_compiler = 'clang++'

let g:syntastic_error_symbol = '✘'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_style_error_symbol = '✘'
let g:syntastic_style_warning_symbol = '⚠'
let g:syntastic_check_on_open = 1
let g:syntastic_auto_loc_list = 2
let g:syntastic_always_populate_loc_list = 1
let syntastic_full_redraws = 0
let g:sytastic_mode_map = {'mode': 'active'}

" ycm
let g:ycm_global_ycm_extra_conf = '/home/hsp/.ycm_extra_conf.py'

" neocomplete
"let g:neocomplete#enable_at_startup = 1
"let g:neocomplete#enable_smart_case = 1
"let g:neocomplete#sources#syntax#min_keyword_length = 3

" supertab
" let g:SuperTabMidWordCompletion = 0
" let g:SuperTabDefaultCompletionType = "<c-n>"

" ctrlp
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_clear_cache_on_exit = 1
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:15,results:15'

" markdown
let g:vim_markdown_folding_disabled=1
